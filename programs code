1.Junit to reverse a word:

package proggrammingknowledge;
public class Stringreverse {
	public String reverse(String input) {
	    if (input == null) {
	        return input;
	    }
	    String output = "";

	    for (int i = input.length() - 1; i >= 0; i--) {
	        output = output + input.charAt(i);
	    }

	    return output;
	}
}

package proggrammingknowledge;

import static org.junit.Assert.*;

import org.junit.Test;

public class testStringreversee {

	@Test
	public void test() {
		Stringreverse example = new Stringreverse();
        assertEquals("tac", example.reverse("tat"));
assertNull(example.reverse(null));
assertEquals("", example.reverse(""));

	}

}

2.String comparison of word to Whitebox test code
package proggrammingknowledge1;
public class Stringcompare {
    public void compareStrings(String str1, String str2) {
	       
        if (str1.equals(str2)) {
            System.out.println("Strings are equal.");
        } else {
            System.out.println("Strings are not equal.");
        }
    }

    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "Hello";
       Stringcompare comparer = new Stringcompare();
        comparer.compareStrings(str1, str2);
    }

}

package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class Stringcomparee {

	@Test
	void test() {
		String str1 = "Hello";
	    String str2 = "Hello";
	    assertEquals(str1,str2);

	}

}


3.voting system Junit:
package proggrammingknowledge1;

public class vote {
	public static String checkEligibility(int age)
	{
        if (age >= 18) {
            return "Eligible for voting";
        } 
        else {
            return "Not eligible for voting";
        }
	}

}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class voteTest {

    @Test
    void testEligibleVoter() {
        assertEquals("Eligible for voting", vote.checkEligibility(18));
        assertEquals("Eligible for voting", vote.checkEligibility(30));
        assertEquals("Eligible for voting", vote.checkEligibility(50));
    }

    @Test
    void testNonEligibleVoter() {
        assertEquals("Not eligible for voting", vote.checkEligibility(17));
        assertEquals("Not eligible for voting", vote.checkEligibility(16));
        assertEquals("Not eligible for voting", vote.checkEligibility(12));
    }
}

4.calculate the simple interest. Suppose the customer is a senior citizen. He is being offered 12 percent rate of interest; for all other customers, the ROI is 10 percent. The output values should verify using white box testing.

code:
package proggrammingknowledge1;

public class simpleintrest {
	public static double calculateSimpleInterest(double principal, double rate, double time) {
        return (principal * rate * time) / 100.0;
    }
}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class testCalculateSimpleInterest {

	@Test
	void test() {
		assertEquals(200.0, simpleintrest.calculateSimpleInterest(1000.0, 5.0, 4.0), 0.01);
        assertEquals(450.0, simpleintrest.calculateSimpleInterest(3000.0, 3.0, 5.0), 0.01);
        assertEquals(75.0, simpleintrest.calculateSimpleInterest(1500.0, 2, 2.5), 0.01);
    }

	}

5.given number is palindrome or not:

package proggrammingknowledge1;

public class Palindrome {
	public static void main(String[] args) {
        String str = "radar";
        int left = 0;
        int right = str.length() - 1;
        while (left < right && str.charAt(left) == str.charAt(right)) {
            left++;
            right--;
        }
        if (left >= right) {
            System.out.println("Palindrome");
        } else {
            System.out.println("Not Palindrome");
        } 
    }
 
}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class testPalindromeornot {

	@Test
	void test() {
		String str = "radar";
        assertTrue(isPalindrome(str));
    }


private boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;
        while (left < right && str.charAt(left) == str.charAt(right)) {
            left++;
            right--; 
}
return left >= right;
		
	}
	}

16.convert Decimal number equivalent to Binary number and octal numbers. 

package proggrammingknowledge1;

public class NumberConverter {
	public static String decimalToBinary(int decimal) {
        return Integer.toBinaryString(decimal);
    }

    public static String decimalToOctal(int decimal) {
        return Integer.toOctalString(decimal);
	    }

}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class DecmialToBinaryOctal {

	@Test
	public void testDecimalToBinary() {
        int decimal = 10;
        String expectedBinary = "1010";
        String actualBinary = NumberConverter.decimalToBinary(decimal);
        assertEquals(expectedBinary, actualBinary);
    }
       @Test
    public void testDecimalToOctal() {
        int decimal = 10;
        String expectedOctal = "12";
        String actualOctal = NumberConverter.decimalToOctal(decimal);
        assertEquals(expectedOctal, actualOctal);
		
	}
}

17.to Convert a Given Number of Days in Terms of Years, Weeks & Days. 
package proggrammingknowledge1;
import java.util.Scanner;
public class YearsWeeksDays {
	public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number of days: ");
        int days = scanner.nextInt();

        int years = days / 365;
        int weeks = (days % 365) / 7;
        int remainingDays = (days % 365) % 7;

        System.out.println(days + " days is approximately:");
        System.out.println(years + " years, " + weeks + " weeks, and " + remainingDays + " days.");

}

}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class testYearsWeeksDaysconvert {

	@Test
	void test() {
		int days = 1000; 

        int years = days / 365;
        int weeks = (days % 365) / 7;
        int remainingDays = (days % 365) % 7;
        assertEquals(2, years); 
        assertEquals(38, weeks); 
        assertEquals(4, remainingDays); 

	}

}

8.the factorial of n:
package proggrammingknowledge1;

public class Factorial {
	public static long calculateFactorial(int n) {
        if (n < 0) {
            throw new IllegalArgumentException("Factorial is not defined for negative numbers.");
        }
        
        if (n == 0 || n == 1) {
            return 1;
        }
        
        long factorial = 1;
        for (int i = 2; i <= n; i++) {
            factorial *= i;
        }
        
        return factorial;
    }

}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class testFactorialofn {

	@Test
	void test() {
		assertEquals(1, Factorial.calculateFactorial(0));
        assertEquals(1, Factorial.calculateFactorial(1));
          assertEquals(120, Factorial.calculateFactorial(5));
	        assertEquals(3628800, Factorial.calculateFactorial(10));
	        try {
	            Factorial.calculateFactorial(-5);
	            fail("Expected IllegalArgumentException");
	        } catch (IllegalArgumentException e) {
	            assertEquals("Factorial is not defined for negative numbers.", e.getMessage());
	}
	}

}

9.the given date is leap year or not
package proggrammingknowledge1;

public class LeapYear {
	public static String checkLeapYear(int year) {
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            return year + " is a leap year.";
        } else {
            return year + " is not a leap year.";
        }
    }

    public static void main(String[] args) {
        int year = 2024; 
        System.out.println(checkLeapYear(year));

}

}
package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class LeapYearornot {

	@Test
	void test() {
        assertEquals("2024 is a leap year.", LeapYear.checkLeapYear(2024));
        assertEquals("2021 is not a leap year.", LeapYear.checkLeapYear(2021));
        assertEquals("2000 is a leap year.", LeapYear.checkLeapYear(2000));
        assertEquals("1900 is not a leap year.", LeapYear.checkLeapYear(1900));
	
	}

}

10.find the square, cube of the given decimal number
package proggrammingknowledge1;
import java.util.Scanner;
public class SquareCube {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a decimal number: ");
        double number = scanner.nextDouble();

        double square = number * number;
        double cube = number * number * number;

        System.out.println("Square of the number: " + square);
        System.out.println("Cube of the number: " + cube);

}
}

package proggrammingknowledge1;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class SquareCubeconvert {

	@Test
	void test() {
		double number = 2.5; 
        double square = number * number;
      double cube = number * number * number;
        assertEquals(square, 6.25, 0.0001);   
      assertEquals(cube, 15.625, 0.0001); 

	}

}

*****(SELINIUM:)*****

21.open browser with google.com
package program;

import org.openqa.selenium.chrome.ChromeDriver;

public class sel1 {

	public static void main(String[] args) {
		System.setProperty("webdriver.chrome.driver", "C:/chromedriver-win64/chromedriver.exe");
        ChromeDriver driver = new ChromeDriver();
        driver.get("https://www.google.com/");
	}
}

22.CHROME OPEN:
package program;

import org.openqa.selenium.chrome.ChromeDriver;

public class chrome {
		public static void main(String[] args) {
			System.setProperty("webdriver.chrome.driver", "C:/chromedriver-win64/chromedriver.exe");
	        ChromeDriver driver = new ChromeDriver();
	        driver.get("https://www.chrome.com/");
		}
	}

22.FIREFOX OPEN:
package program;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.firefoxDriver;

public class firefox {
		public static void main(String[] args) {
			System.setProperty("webdriver.geeko.driver", "C:/chromedriver-win64/chromedriver.exe");
	        WebDriver driver = new firefoxDriver();
	        driver.get("https://www.google.com/");
                driver.quit();
		}
	}

23.ARMS PORTAL:

package program;
import org.openqa.selenium. By;
	import org.openqa.selenium. WebDriver;
	import org.openqa.selenium. WebElement;
	import org.openqa.selenium.chrome.ChromeDriver;

	public class gopi {

	public static void main(String[] args) {


	System.setProperty("webdriver.chrome.driver", "C:\\chromedriver-win64\\chromedriver.exe");

	WebDriver driver = new ChromeDriver();

	driver.manage().window().maximize();

	driver.get("https://arms.sse.saveetha.com");
	WebElement username=driver.findElement(By.id("txtusername"));

	System.out.println(username);

	WebElement password=driver.findElement(By.id("txtpassword"));

	System.out.println(password);

	WebElement login=driver.findElement(By.name("btnlogin"));

	System.out.println(login);

	username.sendKeys("192221074"); password.sendKeys("thalapathy25");

	login.click();
	}
	}

24.GITHUB Selenium:

package program;
import org.openqa.selenium.chrome.ChromeDriver;
public class github {
		public static void main(String[] args) {
			System.setProperty("webdriver.chrome.driver", "C:/chromedriver-win64/chromedriver.exe");
	        ChromeDriver driver = new ChromeDriver();
	        driver.get("https://www.github.com/");
		}
	}

25.SWIGGY open:

package program;
import org.openqa.selenium.chrome.ChromeDriver;
public class swiggy {
	public static void main(String[] args) {
		System.setProperty("webdriver.chrome.driver", "C:/chromedriver-win64/chromedriver.exe");
        ChromeDriver driver = new ChromeDriver();
        driver.get("https://www.swiggy.com/");
	}
}
